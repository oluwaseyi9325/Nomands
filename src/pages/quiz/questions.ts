// export const questions = [
//     {
//       id: 1,
//       type: "mcq",
//       question: "What is the correct syntax to import a React component?",
//       options: [
//         "import React.Component from 'react'",
//         "import { Component } from 'react'",
//         "require('Component')",
//         "import React from 'react-dom'",
//       ],
//       answer: "import { Component } from 'react'",
//     },
//     {
//       id: 2,
//       type: "mcq",
//       question: "What does JSX stand for?",
//       options: [
//         "Java Syntax Extension",
//         "JavaScript Extension",
//         "JavaScript XML",
//         "JSON Syntax",
//       ],
//       answer: "JavaScript XML",
//     },
//     {
//       id: 3,
//       type: "mcq",
//       question: "Which hook is used to manage state in a functional component?",
//       options: ["useEffect()", "useContext()", "useState()", "useReducer()"],
//       answer: "useState()",
//     },
//     {
//       id: 4,
//       type: "mcq",
//       question: "In React, what is the purpose of keys in lists?",
//       options: [
//         "To uniquely identify DOM elements",
//         "To provide performance tips",
//         "To track user input",
//         "To validate props",
//       ],
//       answer: "To uniquely identify DOM elements",
//     },
//     {
//       id: 5,
//       type: "mcq",
//       question: "What is the default value of useState() when no argument is passed?",
//       options: ["null", "undefined", "0", '""'],
//       answer: "undefined",
//     },
//     {
//       id: 6,
//       type: "mcq",
//       question: "Which of the following is NOT a lifecycle method in class components?",
//       options: [
//         "componentDidMount()",
//         "render()",
//         "useEffect()",
//         "componentWillUnmount()",
//       ],
//       answer: "useEffect()",
//     },
//     {
//       id: 7,
//       type: "mcq",
//       question: "What is the use of useEffect() in React?",
//       options: [
//         "Handle events",
//         "Manipulate DOM",
//         "Perform side effects like API calls",
//         "Update state",
//       ],
//       answer: "Perform side effects like API calls",
//     },
//     {
//       id: 8,
//       type: "mcq",
//       question: "Which of these best describes a React component?",
//       options: [
//         "A function or class that optionally accepts input and returns a React element",
//         "A HTML element",
//         "A database query",
//         "An AJAX request",
//       ],
//       answer: "A function or class that optionally accepts input and returns a React element",
//     },
//     {
//       id: 9,
//       type: "mcq",
//       question: "Which of the following correctly updates state in React?",
//       options: [
//         'this.state.name = "John"',
//         'setState({name: "John"})',
//         'this.setState(name = "John")',
//         'state.name = "John"',
//       ],
//       answer: 'setState({name: "John"})',
//     },
//     {
//       id: 10,
//       type: "mcq",
//       question: "What is the virtual DOM in React?",
//       options: [
//         "A direct representation of the UI in the database",
//         "A JavaScript representation of the actual DOM",
//         "A real copy of the DOM in memory",
//         "A plugin for React",
//       ],
//       answer: "A JavaScript representation of the actual DOM",
//     },
//     {
//       id: 11,
//       type: "truefalse",
//       question: "Props in React can be changed within a component.",
//       options: ["True", "False"],
//       answer: "False",
//     },
//     {
//       id: 12,
//       type: "truefalse",
//       question: "React components must return a single parent element.",
//       options: ["True", "False"],
//       answer: "True",
//     },
//     {
//       id: 13,
//       type: "truefalse",
//       question: "React uses a two-way data binding model.",
//       options: ["True", "False"],
//       answer: "False",
//     },
//     {
//       id: 14,
//       type: "truefalse",
//       question: "useState can only be used inside functional components.",
//       options: ["True", "False"],
//       answer: "True",
//     },
//     {
//       id: 15,
//       type: "truefalse",
//       question: "React is maintained by Microsoft.",
//       options: ["True", "False"],
//       answer: "False",
//   },
//   {
//     id: 16,
//     type: "mcq",
//     question: "Which command is used to create a new React app using Create React App?",
//     options: [
//       "npm init react-app my-app",
//       "npx create-react-app my-app",
//       "react new my-app",
//       "create-react-app my-app",
//     ],
//     answer: "npx create-react-app my-app",
//   },
//   {
//     id: 17,
//     type: "mcq",
//     question: "What is the correct way to pass props to a child component?",
//     options: [
//       "<Child props='value' />",
//       "<Child value='props' />",
//       "<Child value='value' />",
//       "<Child prop=value />",
//     ],
//     answer: "<Child value='value' />",
//   },
//   {
//     id: 18,
//     type: "mcq",
//     question: "Which method is used to render a React component into the DOM?",
//     options: [
//       "React.mount()",
//       "ReactDOM.render()",
//       "renderDOM()",
//       "React.attach()",
//     ],
//     answer: "ReactDOM.render()",
//   },
//   {
//     id: 19,
//     type: "mcq",
//     question: "What does the 'key' prop help React identify?",
//     options: [
//       "The parent component",
//       "The unique element in a list",
//       "The prop type",
//       "The event handler",
//     ],
//     answer: "The unique element in a list",
//   },
//   {
//     id: 20,
//     type: "mcq",
//     question: "Which hook is used to access context in a functional component?",
//     options: [
//       "useState()",
//       "useEffect()",
//       "useContext()",
//       "useRef()",
//     ],
//     answer: "useContext()",
//   },
//   {
//     id: 21,
//     type: "truefalse",
//     question: "You can have multiple useEffect hooks in a single component.",
//     options: ["True", "False"],
//     answer: "True",
//   },
//   {
//     id: 22,
//     type: "truefalse",
//     question: "useReducer is an alternative to useState for managing complex state logic.",
//     options: ["True", "False"],
//     answer: "True",
//   },
//   {
//     id: 23,
//     type: "truefalse",
//     question: "React Router is used for styling React components.",
//     options: ["True", "False"],
//     answer: "False",
//   },
//   {
//     id: 24,
//     type: "truefalse",
//     question: "JSX allows you to write HTML in JavaScript files.",
//     options: ["True", "False"],
//     answer: "True",
//   },
//   {
//     id: 25,
//     type: "truefalse",
//     question: "React fragments can be used to group multiple elements without adding extra nodes to the DOM.",
//     options: ["True", "False"],
//     answer: "True",
//   },
//   {
//     id: 26,
//     type: "mcq",
//     question: "What is the purpose of useRef in React?",
//     options: [
//       "To store a mutable value that does not cause a re-render",
//       "To re-render the component",
//       "To declare state",
//       "To perform side effects",
//     ],
//     answer: "To store a mutable value that does not cause a re-render",
//   },
//   {
//     id: 27,
//     type: "mcq",
//     question: "Whatâ€™s the purpose of React.StrictMode?",
//     options: [
//       "To enable faster performance",
//       "To render components in production mode",
//       "To highlight potential problems in an application",
//       "To compile the app",
//     ],
//     answer: "To highlight potential problems in an application",
//   },
//   {
//     id: 28,
//     type: "mcq",
//     question: "Which hook would you use to run code after the component has rendered?",
//     options: ["useState()", "useEffect()", "useRef()", "useMemo()"],
//     answer: "useEffect()",
//   },
//   {
//     id: 29,
//     type: "mcq",
//     question: "How can you prevent a re-render in a functional component?",
//     options: [
//       "By using a class component",
//       "By using React.memo",
//       "By using a reducer",
//       "By using state",
//     ],
//     answer: "By using React.memo",
//   },
//   {
//     id: 30,
//     type: "truefalse",
//     question: "React Native is the same as React.",
//     options: ["True", "False"],
//     answer: "False",
//   },

//   ];
  


// export const questions = [
//   {
//     id: 1,
//     type: "mcq",
//     question: "Which command is used to display a message in the browser console?",
//     options: ["alert()", "console.log()", "prompt()", "confirm()"],
//     answer: "console.log()",
//   },
//   {
//     id: 2,
//     type: "mcq",
//     question: "What does 'use strict' do in JavaScript?",
//     options: [
//       "Enables modern JavaScript features",
//       "Disables error messages",
//       "Makes variables global",
//       "Automatically fixes syntax errors"
//     ],
//     answer: "Enables modern JavaScript features",
//   },
//   {
//     id: 3,
//     type: "mcq",
//     question: "Which of these is NOT a JavaScript data type?",
//     options: ["Boolean", "String", "Float", "Undefined"],
//     answer: "Float",
//   },
//   {
//     id: 4,
//     type: "mcq",
//     question: "Which keyword is used to declare a constant in JavaScript?",
//     options: ["let", "var", "const", "constant"],
//     answer: "const",
//   },
//   {
//     id: 5,
//     type: "mcq",
//     question: "What is the result of `typeof null`?",
//     options: ["null", "undefined", "object", "string"],
//     answer: "object",
//   },
//   {
//     id: 6,
//     type: "mcq",
//     question: "What will `prompt('Your name?')` return?",
//     options: [
//       "An alert box",
//       "A boolean",
//       "User input as string",
//       "Nothing"
//     ],
//     answer: "User input as string",
//   },
//   {
//     id: 7,
//     type: "mcq",
//     question: "Which function is used to show a simple popup message?",
//     options: ["prompt()", "alert()", "confirm()", "show()"],
//     answer: "alert()",
//   },
//   {
//     id: 8,
//     type: "mcq",
//     question: "What does `confirm('Are you sure?')` return?",
//     options: ["String", "Number", "Boolean", "Object"],
//     answer: "Boolean",
//   },
//   {
//     id: 9,
//     type: "mcq",
//     question: "What will `Number('123abc')` return?",
//     options: ["123", "NaN", "'123abc'", "0"],
//     answer: "NaN",
//   },
//   {
//     id: 10,
//     type: "mcq",
//     question: "Which is NOT a valid variable name in JavaScript?",
//     options: ["_name", "first-name", "age1", "$value"],
//     answer: "first-name",
//   },
//   {
//     id: 11,
//     type: "mcq",
//     question: "Which tool is built into browsers for debugging JavaScript?",
//     options: ["Terminal", "Debugger", "Developer Console", "Visual Studio Code"],
//     answer: "Developer Console",
//   },
//   {
//     id: 12,
//     type: "mcq",
//     question: "What is the output of `typeof 'hello'`?",
//     options: ["object", "undefined", "string", "text"],
//     answer: "string",
//   },
//   {
//     id: 13,
//     type: "mcq",
//     question: "Which operator is used for assignment?",
//     options: ["==", "=", "===", "!="],
//     answer: "=",
//   },
//   {
//     id: 14,
//     type: "mcq",
//     question: "Which keyword defines a block-scoped variable?",
//     options: ["var", "int", "let", "define"],
//     answer: "let",
//   },
//   {
//     id: 15,
//     type: "mcq",
//     question: "Which of the following is a valid string?",
//     options: ['"Hello"', "Hello", "'123", "123'"],
//     answer: '"Hello"',
//   },
//   {
//     id: 16,
//     type: "mcq",
//     question: "How do you convert a string to a number?",
//     options: ["String()", "parseInt()", "prompt()", "Numberify()"],
//     answer: "parseInt()",
//   },
//   {
//     id: 17,
//     type: "mcq",
//     question: "Which of the following is the correct comment syntax?",
//     options: ["<!-- comment -->", "// comment", "# comment", "** comment **"],
//     answer: "// comment",
//   },
//   {
//     id: 18,
//     type: "mcq",
//     question: "What is the result of `'5' + 2`?",
//     options: ["7", "52", "'5 + 2'", "undefined"],
//     answer: "52",
//   },
//   {
//     id: 19,
//     type: "mcq",
//     question: "Which of these comparisons checks for both value and type?",
//     options: ["==", "=", "===", "!="],
//     answer: "===",
//   },
//   {
//     id: 20,
//     type: "mcq",
//     question: "Which method is used to parse strings to floating-point numbers?",
//     options: ["parseInt()", "Number()", "parseFloat()", "toFloat()"],
//     answer: "parseFloat()",
//   },
//   {
//     id: 21,
//     type: "mcq",
//     question: "What will `Boolean('')` return?",
//     options: ["true", "false", "null", "undefined"],
//     answer: "false",
//   },
//   {
//     id: 22,
//     type: "mcq",
//     question: "What is the output of `typeof NaN`?",
//     options: ["number", "NaN", "undefined", "null"],
//     answer: "number",
//   },
//   {
//     id: 23,
//     type: "mcq",
//     question: "Which of these values is falsy in JavaScript?",
//     options: ["0", "'false'", "[]", "{}"],
//     answer: "0",
//   },
//   {
//     id: 24,
//     type: "mcq",
//     question: "Which is a valid way to write a string in JavaScript?",
//     options: [`"text"`, `'text'`, "`text`", "All of the above"],
//     answer: "All of the above",
//   },
//   {
//     id: 25,
//     type: "mcq",
//     question: "Which of these opens the developer tools in most browsers?",
//     options: ["Ctrl + Alt + D", "F12", "Shift + Esc", "Ctrl + F4"],
//     answer: "F12",
//   },
//   {
//     id: 26,
//     type: "mcq",
//     question: "Which of the following is used to read a number input from the user?",
//     options: ["alert()", "confirm()", "prompt()", "input()"],
//     answer: "prompt()",
//   },
//   {
//     id: 27,
//     type: "mcq",
//     question: "What will be the output of `alert(typeof [])`?",
//     options: ["array", "object", "list", "undefined"],
//     answer: "object",
//   },
//   {
//     id: 28,
//     type: "mcq",
//     question: "How do you declare a variable that canâ€™t be reassigned?",
//     options: ["let", "var", "const", "fixed"],
//     answer: "const",
//   },
//   {
//     id: 29,
//     type: "mcq",
//     question: "Which data type is used to store true or false values?",
//     options: ["Boolean", "Number", "String", "Binary"],
//     answer: "Boolean",
//   },
//   {
//     id: 30,
//     type: "mcq",
//     question: "Which symbol is used for comments in JavaScript?",
//     options: ["//", "<!--", "#", "**"],
//     answer: "//",
//   },
// ];


export const questions = [
  {
    id: 1,
    type: "mcq",
    question: "Which function outputs data to the browser console?",
    options: ["alert()", "console.log()", "prompt()", "console.print()"],
    answer: "console.log()",
  },
  {
    id: 2,
    type: "mcq",
    question: "What effect does 'use strict' have in JavaScript?",
    options: [
      "Enables strict mode to prevent errors",
      "Allows silent failure of errors",
      "Makes all variables global",
      "Enables experimental features"
    ],
    answer: "Enables strict mode to prevent errors",
  },
  {
    id: 3,
    type: "mcq",
    question: "Which of these is NOT a primitive JavaScript type?",
    options: ["String", "Boolean", "Array", "Undefined"],
    answer: "Array",
  },
  {
    id: 4,
    type: "mcq",
    question: "How do you declare a constant variable in JavaScript?",
    options: ["var", "let", "const", "fixed"],
    answer: "const",
  },
  {
    id: 5,
    type: "mcq",
    question: "What is the result of `typeof null`?",
    options: ["null", "object", "undefined", "boolean"],
    answer: "object",
  },
  {
    id: 6,
    type: "mcq",
    question: "What type of value does prompt() return?",
    options: ["String", "Boolean", "Number", "Undefined"],
    answer: "String",
  },
  {
    id: 7,
    type: "mcq",
    question: "Which method displays a popup message with only an OK button?",
    options: ["alert()", "prompt()", "confirm()", "notify()"],
    answer: "alert()",
  },
  {
    id: 8,
    type: "mcq",
    question: "What does confirm() return after user confirmation?",
    options: ["String", "Boolean", "Number", "Null"],
    answer: "Boolean",
  },
  {
    id: 9,
    type: "mcq",
    question: "What will Number('123abc') return?",
    options: ["123", "NaN", "0", "'123abc'"],
    answer: "NaN",
  },
  {
    id: 10,
    type: "mcq",
    question: "Which of these variable names is invalid in JavaScript?",
    options: ["$value", "_count", "var-name", "data1"],
    answer: "var-name",
  },
  {
    id: 11,
    type: "mcq",
    question: "Where do developers typically debug JavaScript code in browsers?",
    options: ["Terminal", "Debugger tool", "Developer console", "Text editor"],
    answer: "Developer console",
  },
  {
    id: 12,
    type: "mcq",
    question: "What will `typeof 'JavaScript'` return?",
    options: ["string", "text", "object", "undefined"],
    answer: "string",
  },
  {
    id: 13,
    type: "mcq",
    question: "Which operator is used to assign a value?",
    options: ["==", "=", "===", "!="],
    answer: "=",
  },
  {
    id: 14,
    type: "mcq",
    question: "Which keyword defines a block-scoped variable?",
    options: ["var", "let", "const", "define"],
    answer: "let",
  },
  {
    id: 15,
    type: "mcq",
    question: "Which is a valid way to declare a string?",
    options: ['"Hello"', "'Hello'", "`Hello`", "All of these"],
    answer: "All of these",
  },
  {
    id: 16,
    type: "mcq",
    question: "How do you convert a string '123' into an integer?",
    options: ["parseInt()", "Number()", "String()", "convertInt()"],
    answer: "parseInt()",
  },
  {
    id: 17,
    type: "mcq",
    question: "Which syntax is correct for a single-line comment?",
    options: ["// comment", "<!-- comment -->", "# comment", "** comment **"],
    answer: "// comment",
  },
  {
    id: 18,
    type: "mcq",
    question: "What is the result of `'7' + 3` in JavaScript?",
    options: ["10", "'73'", "'7 + 3'", "undefined"],
    answer: "'73'",
  },
  {
    id: 19,
    type: "mcq",
    question: "Which operator checks both value and type equality?",
    options: ["==", "=", "===", "!="],
    answer: "===",
  },
  {
    id: 20,
    type: "mcq",
    question: "What method converts a string to a floating-point number?",
    options: ["parseInt()", "parseFloat()", "Number()", "toFixed()"],
    answer: "parseFloat()",
  },
  {
    id: 21,
    type: "mcq",
    question: "What will Boolean('false') evaluate to?",
    options: ["true", "false", "null", "undefined"],
    answer: "true",
  },
  {
    id: 22,
    type: "mcq",
    question: "What does `typeof NaN` return?",
    options: ["number", "NaN", "undefined", "object"],
    answer: "number",
  },
  {
    id: 23,
    type: "mcq",
    question: "Which of these is considered a falsy value?",
    options: ["0", "''", "null", "All of these"],
    answer: "All of these",
  },
  {
    id: 24,
    type: "mcq",
    question: "How can you declare a multi-line string?",
    options: ['"string"', "`string`", "'string'", "All of these"],
    answer: "All of these",
  },
  {
    id: 25,
    type: "mcq",
    question: "What shortcut usually opens Developer Tools in browsers?",
    options: ["F12", "Ctrl + D", "Shift + Esc", "Alt + F4"],
    answer: "F12",
  },
  {
    id: 26,
    type: "mcq",
    question: "Which function reads user input in JavaScript?",
    options: ["alert()", "prompt()", "confirm()", "input()"],
    answer: "prompt()",
  },
  {
    id: 27,
    type: "mcq",
    question: "What does `alert(typeof [])` show?",
    options: ["array", "object", "list", "undefined"],
    answer: "object",
  },
  {
    id: 28,
    type: "mcq",
    question: "Which keyword declares a variable that cannot be reassigned?",
    options: ["let", "var", "const", "fixed"],
    answer: "const",
  },
  {
    id: 29,
    type: "mcq",
    question: "What data type represents true or false values?",
    options: ["Boolean", "Number", "String", "Binary"],
    answer: "Boolean",
  },
  {
    id: 30,
    type: "mcq",
    question: "Which symbols are used to write comments in JavaScript?",
    options: ["//", "<!-- -->", "#", "**"],
    answer: "//",
  },
];
